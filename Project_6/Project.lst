Microsoft (R) Macro Assembler Version 14.25.28614.0	    06/09/20 15:05:36
Program #6     (Program6.asm				     Page 1 - 1


				TITLE Program #6     (Program6.asm)

				; Author: Josh Sanford
				; Last Modified: 6/7/2020
				; OSU email address: sanfojos@oregonstate.edu
				; Course number/section: CS271-400
				; Project Number: 6               Due Date: 6/7/2020
				; Description: This program takes 10 user input numbers, converts the strings
				;			   into their numeric values, converts them back to strings and 
				;			   displays them, calculates the sum and rounded average, and 
				;			   again converts the results to strings and displays them.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
				displayString	MACRO	buffer
					push	edx
					mov		edx, buffer
					call	WriteString
					pop		edx
				ENDM

				getString	MACRO	prompt, buffer, size_of_buffer
					push	ecx
					push	edx
					mov		edx, prompt
					call	WriteString
					mov		edx, buffer
					mov		ecx, size_of_buffer
					call	ReadString
					mov		sLength, eax
					pop		edx
					pop		ecx
				ENDM

 = 000003E8			MAXSIZE = 1000

 00000000			.data
 00000000  000003E8 [		read_buffer		BYTE	MAXSIZE	DUP(?)	;buffer for the getString macro
	    00
	   ]
 000003E8  000003E8 [		num_buffer		DWORD	MAXSIZE DUP(?)	;buffer to hold converted number
	    00000000
	   ]
 00001388  000003E8 [		sum_buffer		DWORD	MAXSIZE	DUP(?)	;buffer to hold the sum
	    00000000
	   ]
 00002328  000003E8 [		avg_buffer		DWORD	MAXSIZE DUP(?)	;buffer to hold the avg
	    00000000
	   ]
 000032C8  000003E8 [		write_buffer	BYTE	MAXSIZE	DUP(?)  ;buffer to hold number converted back to string
	    00
	   ]

 000036B0 00000000		sLength			DWORD	?
 000036B4 00000000		num				DWORD	?
 000036B8 00000000		is_negative		DWORD	?	;set to 1 if user enters '-'
 000036BC 00000000		sum_val			DWORD	0	;to hold value of the sum
 000036C0 00000000		avg_val			DWORD	?	;to hold value of rounded average

 000036C4 50 72 6F 67 72	intro_1		BYTE	"Programming Assignment #6: Designing low-level I/O procedures", 0
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 23 36
	   3A 20 44 65 73
	   69 67 6E 69 6E
	   67 20 6C 6F 77
	   2D 6C 65 76 65
	   6C 20 49 2F 4F
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 00
 00003702 57 72 69 74 74	intro_2		BYTE	"Written by: Josh Sanford", 0
	   65 6E 20 62 79
	   3A 20 4A 6F 73
	   68 20 53 61 6E
	   66 6F 72 64 00

 0000371B 50 6C 65 61 73	instructions_1		BYTE	"Please provide 10 signed decimal integers.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00003746 45 61 63 68 20	instructions_2		BYTE	"Each number needs to be small enough to fit inside a 32 bit register.", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 0000378C 41 66 74 65 72	instructions_3		BYTE	"After you have finished inputting the raw numbers I will display a list", 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 00
 000037D4 6F 66 20 74 68	instructions_4		BYTE	"of the integers, their sum, and their average value.", 0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00

 00003809 50 6C 65 61 73	prompt_num		BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00003828 45 52 52 4F 52	prompt_error	BYTE	"ERROR: You did not enter a signed number or your number was too big.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 00
 0000386D 50 6C 65 61 73	prompt_again	BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

 00003880 59 6F 75 20 65	num_msg		BYTE	"You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000038A4 54 68 65 20 73	sum_msg		BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000038C2 54 68 65 20 72	avg_msg		BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00

 000038DB 54 68 61 6E 6B	goodbye		BYTE	"Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

				;formatting
 000038EF 2D 00			neg_sign	BYTE	"-", 0
 000038F1 2C 00			comma		BYTE	",", 0
 000038F3 20 00			space		BYTE	" ", 0

 000038F5 00A1B2C3		value	DWORD	10597059
 00000000			.code
 00000000			main PROC
 00000000  A0 000038F7 R		mov		al, BYTE PTR value+2
					displayString	OFFSET intro_1
 00000005  52		     1		push	edx
 00000006  BA 000036C4 R     1		mov		edx, OFFSET intro_1
 0000000B  E8 00000000 E     1		call	WriteString
 00000010  5A		     1		pop		edx
 00000011  E8 00000000 E		call	Crlf
					displayString	OFFSET intro_2
 00000016  52		     1		push	edx
 00000017  BA 00003702 R     1		mov		edx, OFFSET intro_2
 0000001C  E8 00000000 E     1		call	WriteString
 00000021  5A		     1		pop		edx
 00000022  E8 00000000 E		call	Crlf
 00000027  E8 00000000 E		call	Crlf
					displayString	OFFSET instructions_1
 0000002C  52		     1		push	edx
 0000002D  BA 0000371B R     1		mov		edx, OFFSET instructions_1
 00000032  E8 00000000 E     1		call	WriteString
 00000037  5A		     1		pop		edx
 00000038  E8 00000000 E		call	Crlf
					displayString	OFFSET instructions_2
 0000003D  52		     1		push	edx
 0000003E  BA 00003746 R     1		mov		edx, OFFSET instructions_2
 00000043  E8 00000000 E     1		call	WriteString
 00000048  5A		     1		pop		edx
 00000049  E8 00000000 E		call	Crlf
					displayString	OFFSET instructions_3
 0000004E  52		     1		push	edx
 0000004F  BA 0000378C R     1		mov		edx, OFFSET instructions_3
 00000054  E8 00000000 E     1		call	WriteString
 00000059  5A		     1		pop		edx
 0000005A  E8 00000000 E		call	Crlf
					displayString	OFFSET instructions_4
 0000005F  52		     1		push	edx
 00000060  BA 000037D4 R     1		mov		edx, OFFSET instructions_4
 00000065  E8 00000000 E     1		call	WriteString
 0000006A  5A		     1		pop		edx
 0000006B  E8 00000000 E		call	Crlf
 00000070  E8 00000000 E		call	Crlf
 00000075  B9 0000000A			mov		ecx, 10
 0000007A  BF 000003E8 R		mov		edi, OFFSET num_buffer
				;loop to get 10 numbers from user
 0000007F			getInput:
 0000007F  51				push	ecx
 00000080  68 0000386D R		push	OFFSET prompt_again
 00000085  68 00003828 R		push	OFFSET prompt_error
 0000008A  68 000003E8			push	SIZEOF read_buffer
 0000008F  68 00003809 R		push	OFFSET prompt_num
 00000094  68 00000000 R		push	OFFSET read_buffer
 00000099  57				push	edi
 0000009A  E8 000000EA			call	ReadVal	
 0000009F  59				pop		ecx
 000000A0  83 C7 04			add		edi, 4
 000000A3  E2 DA			loop	getInput
 000000A5  E8 00000000 E		call	Crlf
					displayString	OFFSET num_msg
 000000AA  52		     1		push	edx
 000000AB  BA 00003880 R     1		mov		edx, OFFSET num_msg
 000000B0  E8 00000000 E     1		call	WriteString
 000000B5  5A		     1		pop		edx
 000000B6  E8 00000000 E		call	Crlf
				;loop to display numbers
 000000BB  B9 0000000A			mov		ecx, 10
 000000C0  BE 000003E8 R		mov		esi, OFFSET num_buffer
 000000C5  BF 000032C8 R		mov		edi, OFFSET write_buffer
 000000CA			writeOutput:
 000000CA  56				push	esi
 000000CB  57				push	edi 
 000000CC  E8 000001CF			call	WriteVal
 000000D1  83 F9 01			cmp		ecx, 1
 000000D4  74 0C			je		noComma
					displayString OFFSET comma
 000000D6  52		     1		push	edx
 000000D7  BA 000038F1 R     1		mov		edx, OFFSET comma
 000000DC  E8 00000000 E     1		call	WriteString
 000000E1  5A		     1		pop		edx
 000000E2			noComma:
					displayString OFFSET space
 000000E2  52		     1		push	edx
 000000E3  BA 000038F3 R     1		mov		edx, OFFSET space
 000000E8  E8 00000000 E     1		call	WriteString
 000000ED  5A		     1		pop		edx
 000000EE  83 C6 04			add		esi, 4
 000000F1  47				inc		edi
 000000F2  E2 D6			loop	WriteOutput
 000000F4  E8 00000000 E		call	Crlf
				;loop to calculate sum of numbers
 000000F9  B9 0000000A			mov		ecx, 10
 000000FE  BE 000003E8 R		mov		esi, OFFSET num_buffer
 00000103			sum:
 00000103  56				push	esi
 00000104  FF 35 000036BC R		push	sum_val
 0000010A  E8 000001FE			call	calcSum
 0000010F  A3 000036BC R		mov		sum_val, eax
 00000114  83 C6 04			add		esi, 4
 00000117  E2 EA			loop	sum
				;print out the sum
					displayString	OFFSET sum_msg
 00000119  52		     1		push	edx
 0000011A  BA 000038A4 R     1		mov		edx, OFFSET sum_msg
 0000011F  E8 00000000 E     1		call	WriteString
 00000124  5A		     1		pop		edx
 00000125  BE 00001388 R		mov		esi, OFFSET sum_buffer
 0000012A  A1 000036BC R		mov		eax, sum_val
 0000012F  89 06			mov		[esi], eax
 00000131  56				push	esi
 00000132  57				push	edi
 00000133  E8 00000168			call	WriteVal
 00000138  E8 00000000 E		call	Crlf
				;calculate and print the average
 0000013D  BE 00001388 R		mov		esi, OFFSET sum_buffer
 00000142  56				push	esi
 00000143  E8 000001D5			call	calcAvg
 00000148  A3 000036C0 R		mov		avg_val, eax
 0000014D  A1 000036C0 R		mov		eax, avg_val
 00000152  89 06			mov		[esi], eax
					displayString	OFFSET avg_msg
 00000154  52		     1		push	edx
 00000155  BA 000038C2 R     1		mov		edx, OFFSET avg_msg
 0000015A  E8 00000000 E     1		call	WriteString
 0000015F  5A		     1		pop		edx
 00000160  56				push	esi
 00000161  57				push	edi
 00000162  E8 00000139			call	WriteVal
				;say goodbye
 00000167  E8 00000000 E		call	Crlf
 0000016C  E8 00000000 E		call	Crlf
					displayString OFFSET goodbye
 00000171  52		     1		push	edx
 00000172  BA 000038DB R     1		mov		edx, OFFSET goodbye
 00000177  E8 00000000 E     1		call	WriteString
 0000017C  5A		     1		pop		edx
 0000017D  E8 00000000 E		call	Crlf
					exit	; exit to operating system
 00000182  6A 00	   *	    push   +000000000h
 00000184  E8 00000000 E   *	    call   ExitProcess
 00000189			main ENDP

				;*********************************************
				; Procedure reads a string from user input and converts it to the numeric value
				; preconditions: arrays are initialized
				; postconditions: registers al, eax, ebx, ecx, edx are changed
				; receives: addresses of read_buffer num_buffer, prompt_num, prompt_error 
				;           and prompt_again, and value of the size of read_buffer
				; returns: converted number in element pointed to in num_buffer
				;*********************************************
 00000189			ReadVal PROC
 00000189  55				push	ebp
 0000018A  8B EC			mov		ebp, esp
					getString	[ebp + 16], [ebp + 12], [ebp + 20]
 0000018C  51		     1		push	ecx
 0000018D  52		     1		push	edx
 0000018E  8B 55 10	     1		mov		edx, [ebp + 16]
 00000191  E8 00000000 E     1		call	WriteString
 00000196  8B 55 0C	     1		mov		edx, [ebp + 12]
 00000199  8B 4D 14	     1		mov		ecx, [ebp + 20]
 0000019C  E8 00000000 E     1		call	ReadString
 000001A1  A3 000036B0 R     1		mov		sLength, eax
 000001A6  5A		     1		pop		edx
 000001A7  59		     1		pop		ecx
 000001A8  8B 0D 000036B0 R		mov		ecx, sLength
 000001AE  8B 75 0C			mov		esi, [ebp + 12]
 000001B1  8B 7D 08			mov		edi, [ebp + 8]
 000001B4  BB 0000000A			mov		ebx, 10
 000001B9  BA 00000000			mov		edx, 0
 000001BE  C7 05 000036B8 R		mov		is_negative, 0
	   00000000
 000001C8  FC				cld		;set direction flag for backwards direction
 000001C9			load:
 000001C9  AC				lodsb	;load contents at esi into al
 000001CA  0F BE C0			movsx	eax, al
 000001CD  83 F8 30			cmp		eax, 48
 000001D0  7C 36			jl		checkIfSign
 000001D2  83 F8 39			cmp		eax, 57
 000001D5  7F 39			jg		invalidInput
 000001D7  66| 98			cbw
 000001D9  83 E8 30			sub		eax, 48
 000001DC  A3 000036B4 R		mov		num, eax
 000001E1  8B C2			mov		eax, edx
 000001E3  F7 EB			imul	ebx		;result is in EDX:EAX
 000001E5  03 05 000036B4 R		add		eax, num
 000001EB  70 23			jo		invalidInput
 000001ED  83 D2 00			adc		edx, 0
 000001F0  75 1E			jnz		invalidInput
 000001F2  8B D0			mov		edx, eax
 000001F4  E2 D3			loop	load
 000001F6  83 3D 000036B8 R		cmp		is_negative, 1
	   01
 000001FD  0F 84 00000085		je		makeNegative
 00000203  E9 0000008E			jmp		store
 00000208			checkIfSign:
 00000208  3C 2B			cmp		al, 43	;check if plus sign
 0000020A  74 64			je		setPositive
 0000020C  3C 2D			cmp		al, 45	;check if minus sign
 0000020E  74 48			je		setNegative
 00000210			invalidInput:
					displayString	[ebp + 24]
 00000210  52		     1		push	edx
 00000211  8B 55 18	     1		mov		edx, [ebp + 24]
 00000214  E8 00000000 E     1		call	WriteString
 00000219  5A		     1		pop		edx
 0000021A  E8 00000000 E		call			Crlf
 0000021F  8B 75 0C			mov				esi, [ebp + 12]		;move esi back to beginning of buffer
					getString		[ebp + 28], [ebp + 12], [ebp + 20]
 00000222  51		     1		push	ecx
 00000223  52		     1		push	edx
 00000224  8B 55 1C	     1		mov		edx, [ebp + 28]
 00000227  E8 00000000 E     1		call	WriteString
 0000022C  8B 55 0C	     1		mov		edx, [ebp + 12]
 0000022F  8B 4D 14	     1		mov		ecx, [ebp + 20]
 00000232  E8 00000000 E     1		call	ReadString
 00000237  A3 000036B0 R     1		mov		sLength, eax
 0000023C  5A		     1		pop		edx
 0000023D  59		     1		pop		ecx
 0000023E  8B 0D 000036B0 R		mov				ecx, sLength	;reset loop counter
 00000244  BA 00000000			mov				edx, 0
 00000249  C7 05 000036B8 R		mov				is_negative, 0
	   00000000
 00000253  E9 FFFFFF71			jmp				load
 00000258			setNegative:
 00000258  C7 05 000036B8 R		mov		is_negative, 1		;set my Sign flag
	   00000001
 00000262  3B 0D 000036B0 R		cmp		ecx, sLength
 00000268  75 A6			jne		invalidInput
 0000026A  49				dec		ecx
 0000026B  E9 FFFFFF59			jmp		load
 00000270			setPositive:
 00000270  C7 05 000036B8 R		mov		is_negative, 0		;clear my Sign flag
	   00000000
 0000027A  3B 0D 000036B0 R		cmp		ecx, sLength
 00000280  75 8E			jne		invalidInput
 00000282  49				dec		ecx
 00000283  E9 FFFFFF41			jmp		load
 00000288			makeNegative:
					;convert to negative
 00000288  B8 00000002			mov		eax, 2	
 0000028D  8B DA			mov		ebx, edx
 0000028F  99				cdq
 00000290  F7 E3			mul		ebx		
 00000292  2B D8			sub		ebx, eax
 00000294  8B D3			mov		edx, ebx
 00000296			store:
 00000296  8B C2			mov		eax, edx
 00000298  FC				cld
 00000299  AB				stosd	;store contents of al at edi
 0000029A  EB 00			jmp		quit
 0000029C			quit:
					;displayString	OFFSET num_buffer
 0000029C  5D				pop		ebp
 0000029D  C2 0018			ret		24
 000002A0			ReadVal ENDP

				;*********************************************
				; Procedure converts a numeric value into a string and displays it
				; to the screen
				; preconditions: arrays are initialized
				; postconditions: register eax is changed
				; receives: address of num_buffer and write_buffer
				; returns: converted string in write_buffer
				;*********************************************
 000002A0			WriteVal PROC
 000002A0  55				push	ebp
 000002A1  8B EC			mov		ebp, esp
 000002A3  8B 75 0C			mov		esi, [ebp + 12]
 000002A6  8B 7D 08			mov		edi, [ebp + 8]
 000002A9  FC				cld
 000002AA  AD				lodsd
					;check if negative
 000002AB  85 C0			test	eax, eax
 000002AD  78 02			js		negative_sign
 000002AF  EB 1D			jmp		convert
 000002B1			negative_sign:
 000002B1  A3 000036B4 R		mov		num, eax
 000002B6  B8 0000002D			mov		eax, 45
 000002BB  AA				stosb	
					displayString [ebp + 8]
 000002BC  52		     1		push	edx
 000002BD  8B 55 08	     1		mov		edx, [ebp + 8]
 000002C0  E8 00000000 E     1		call	WriteString
 000002C5  5A		     1		pop		edx
 000002C6  4F				dec		edi
 000002C7  A1 000036B4 R		mov		eax, num
 000002CC  F7 D8			neg		eax
 000002CE			convert:
 000002CE  E8 0000000E			call    NumToString
					displayString [ebp + 8]
 000002D3  52		     1		push	edx
 000002D4  8B 55 08	     1		mov		edx, [ebp + 8]
 000002D7  E8 00000000 E     1		call	WriteString
 000002DC  5A		     1		pop		edx
 000002DD  5D				pop		ebp
 000002DE  C2 0008			ret		8
 000002E1			WriteVal ENDP

				;*********************************************
				; Procedure uses recursion to break a numeric value down into
				; a string
				; preconditions: esi and edi hold the offsets of arrays, and
				;				 numeric value is loaded into eax
				; postconditions: registers eax, ebx, edx are changed
				; receives: eax
				; returns: converted string is stored in write_buffer
				;*********************************************
 000002E1			NumToString PROC
 000002E1  55				push	ebp
 000002E2  8B EC			mov		ebp, esp
 000002E4  BB 0000000A			mov		ebx, 10
 000002E9  83 F8 00			cmp		eax, 0
 000002EC  7C 07			jl		recurse
 000002EE  83 F8 09			cmp		eax, 9
 000002F1  7F 02			jg		recurse
 000002F3  EB 12			jmp		base_case
 000002F5			recurse:	
 000002F5  99				cdq
 000002F6  F7 FB			idiv	ebx	;al = 76, dl = 9
								;al = 7, dl = 6
								;al = 0, dl = 7
 000002F8  52				push	edx
 000002F9  E8 FFFFFFE3			call	NumToString
 000002FE  5A				pop		edx
 000002FF  83 C2 30			add		edx, 48
 00000302  8B C2			mov		eax, edx
 00000304  AA				stosb
 00000305  EB 04			jmp		quit
 00000307			base_case:
 00000307  83 C0 30			add		eax, 48
 0000030A  AA				stosb
 0000030B			quit:	
 0000030B  5D				pop		ebp
 0000030C  C3				ret		
 0000030D			NumToString	ENDP

				;*********************************************
				; Procedure calculates the sum of all the numbers stored in num_buffer
				; preconditions: array is initialized
				; postconditions: register eax is changed
				; receives: address of sum_buffer and value of sum_val
				; returns: the sum in eax
				;*********************************************
 0000030D			calcSum PROC
 0000030D  55				push	ebp
 0000030E  8B EC			mov		ebp, esp
 00000310  8B 75 0C			mov		esi, [ebp + 12]
 00000313  8B 5D 08			mov		ebx, [ebp + 8]
 00000316  AD				lodsd
 00000317  03 C3			add		eax, ebx
 00000319  5D				pop		ebp
 0000031A  C2 0008			ret		8
 0000031D			CalcSum ENDP

				;*********************************************
				; Procedure calculates the average of the numbers and
				; rounds it to the nearest whole number
				; preconditions: array is initialized and sum_buffer holds
				;	             the calculated sum
				; postconditions: registers eax, ebx, edx are changed
				; receives: address of sum_buffer and value of avg_val
				; returns: the rounded average in eax
				;*********************************************

 0000031D			calcAvg PROC
 0000031D  55				push	ebp
 0000031E  8B EC			mov		ebp, esp
 00000320  8B 75 08			mov		esi, [ebp + 8]
 00000323  BB 0000000A			mov		ebx, 10
 00000328  FC				cld
 00000329  AD				lodsd
 0000032A  99				cdq
 0000032B  F7 FB			idiv	ebx
 0000032D  50				push	eax
 0000032E  52				push	edx
 0000032F  8B C3			mov		eax, ebx
 00000331  BB 00000002			mov		ebx, 2
 00000336  99				cdq
 00000337  F7 FB			idiv	ebx
 00000339  5A				pop		edx
 0000033A  3B D0			cmp		edx, eax
 0000033C  7D 03			jge		roundUp
 0000033E  58				pop		eax
 0000033F  EB 02			jmp		quit
 00000341			roundUp:
 00000341  58				pop		eax
 00000342  40				inc		eax
 00000343			quit:
 00000343  5D				pop		ebp
 00000344  C2 0004			ret		4
 00000347			calcAvg ENDP
				END main
Microsoft (R) Macro Assembler Version 14.25.28614.0	    06/09/20 15:05:36
Program #6     (Program6.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000038F9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000347 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NumToString  . . . . . . . . . .	P Near	 000002E1 _TEXT	Length= 0000002C Public STDCALL
  recurse  . . . . . . . . . . .	L Near	 000002F5 _TEXT	
  base_case  . . . . . . . . . .	L Near	 00000307 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000030B _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000189 _TEXT	Length= 00000117 Public STDCALL
  load . . . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  checkIfSign  . . . . . . . . .	L Near	 00000208 _TEXT	
  invalidInput . . . . . . . . .	L Near	 00000210 _TEXT	
  setNegative  . . . . . . . . .	L Near	 00000258 _TEXT	
  setPositive  . . . . . . . . .	L Near	 00000270 _TEXT	
  makeNegative . . . . . . . . .	L Near	 00000288 _TEXT	
  store  . . . . . . . . . . . .	L Near	 00000296 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000029C _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002A0 _TEXT	Length= 00000041 Public STDCALL
  negative_sign  . . . . . . . .	L Near	 000002B1 _TEXT	
  convert  . . . . . . . . . . .	L Near	 000002CE _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcAvg  . . . . . . . . . . . .	P Near	 0000031D _TEXT	Length= 0000002A Public STDCALL
  roundUp  . . . . . . . . . . .	L Near	 00000341 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000343 _TEXT	
calcSum  . . . . . . . . . . . .	P Near	 0000030D _TEXT	Length= 00000010 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000189 Public STDCALL
  getInput . . . . . . . . . . .	L Near	 0000007F _TEXT	
  writeOutput  . . . . . . . . .	L Near	 000000CA _TEXT	
  noComma  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  sum  . . . . . . . . . . . . .	L Near	 00000103 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 000003E8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg_buffer . . . . . . . . . . .	DWord	 00002328 _DATA	
avg_msg  . . . . . . . . . . . .	Byte	 000038C2 _DATA	
avg_val  . . . . . . . . . . . .	DWord	 000036C0 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 000038F1 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000038DB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions_1 . . . . . . . . .	Byte	 0000371B _DATA	
instructions_2 . . . . . . . . .	Byte	 00003746 _DATA	
instructions_3 . . . . . . . . .	Byte	 0000378C _DATA	
instructions_4 . . . . . . . . .	Byte	 000037D4 _DATA	
intro_1  . . . . . . . . . . . .	Byte	 000036C4 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00003702 _DATA	
is_negative  . . . . . . . . . .	DWord	 000036B8 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
neg_sign . . . . . . . . . . . .	Byte	 000038EF _DATA	
num_buffer . . . . . . . . . . .	DWord	 000003E8 _DATA	
num_msg  . . . . . . . . . . . .	Byte	 00003880 _DATA	
num  . . . . . . . . . . . . . .	DWord	 000036B4 _DATA	
prompt_again . . . . . . . . . .	Byte	 0000386D _DATA	
prompt_error . . . . . . . . . .	Byte	 00003828 _DATA	
prompt_num . . . . . . . . . . .	Byte	 00003809 _DATA	
read_buffer  . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sLength  . . . . . . . . . . . .	DWord	 000036B0 _DATA	
space  . . . . . . . . . . . . .	Byte	 000038F3 _DATA	
sum_buffer . . . . . . . . . . .	DWord	 00001388 _DATA	
sum_msg  . . . . . . . . . . . .	Byte	 000038A4 _DATA	
sum_val  . . . . . . . . . . . .	DWord	 000036BC _DATA	
value  . . . . . . . . . . . . .	DWord	 000038F5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
write_buffer . . . . . . . . . .	Byte	 000032C8 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
